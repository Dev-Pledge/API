<?php

namespace DevPledge\Application\Repository;

use DevPledge\Application\Factory\CommentFactory;
use DevPledge\Framework\Adapter\Adapter;
use DevPledge\Framework\Adapter\Where;
use DevPledge\Framework\Adapter\Wheres;
use DevPledge\Framework\RepositoryDependencies\Comment\TopicsCommentRepoDependency;

/**
 * Class CommentRepository
 * @package DevComment\Application\Repository
 */
class CommentRepository extends AbstractRepository {
	/**
	 * CommentRepository constructor.
	 *
	 * @param Adapter $adapter
	 * @param CommentFactory $factory
	 */
	public function __construct( Adapter $adapter, CommentFactory $factory ) {
		parent::__construct( $adapter, $factory );
	}

	/**
	 * @return string
	 */
	protected function getResource(): string {
		return 'comments';
	}

	/**
	 * @return string
	 */
	protected function getColumn(): string {
		return 'comment_id';
	}

	/**
	 * @return string
	 */
	protected function getAllColumn(): string {
		return 'entity_id';
	}

	/**
	 * @return AbstractRepository|null
	 */
	protected function getMapRepository(): ?AbstractRepository {
		return TopicsCommentRepoDependency::getRepository();
	}

	/**
	 * @param string $entityId
	 * @param null|string $orderByColumn
	 * @param bool $reverseOrderBy
	 * @param int|null $limit
	 * @param int|null $offset
	 * @param array|null $dataArray
	 *
	 * @return array|null
	 * @throws \Exception
	 */
	public function readAll( string $entityId, ?string $orderByColumn = null, bool $reverseOrderBy = false, ?int $limit = null, ?int $offset = null, array $dataArray = null ): ?array {
		return parent::readAllWhere( new Wheres( [
			new Where( 'entity_id', $entityId ),
			( new Where( 'comment_id', $entityId ) )->not()
		] ), $orderByColumn, $reverseOrderBy, $limit, $offset, $dataArray ); // TODO: Change the autogenerated stub
	}

	/**
	 * @param string $entityId
	 *
	 * @return int
	 * @throws \Exception
	 */
	public function countAllInAllColumn( string $entityId ): int {
		return $this->adapter->count(
			$this->getResource(),
			new Wheres(
				[
					new Where( $this->getAllColumn(), $entityId ),
					( new Where( 'comment_id', $entityId ) )->not()
				]
			)
		);
	}
}